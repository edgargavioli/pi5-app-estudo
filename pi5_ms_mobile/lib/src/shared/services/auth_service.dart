import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:pi5_ms_mobile/src/infraestructure/firebase_fcm_get.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'cache_service.dart';

class AuthService {
  // üåê URL DO USER-SERVICE
  static const String _userServiceUrl = 'http://10.0.2.2:3000/api';

  // üîë CHAVES PARA ARMAZENAMENTO LOCAL
  static const String _accessTokenKey = 'access_token';
  static const String _refreshTokenKey = 'refresh_token';
  static const String _userDataKey = 'user_data';

  // üì± SINGLETON PATTERN
  static final AuthService _instance = AuthService._internal();
  factory AuthService() => _instance;
  AuthService._internal();

  // üéØ ESTADO ATUAL DO USU√ÅRIO
  AuthUser? _currentUser;
  String? _accessToken;
  String? _refreshToken;

  // Getters
  AuthUser? get currentUser => _currentUser;
  String? get accessToken => _accessToken;
  bool get isLoggedIn => _currentUser != null && _accessToken != null;

  /// üöÄ INICIALIZAR SERVI√áO (verificar tokens salvos)
  Future<void> initialize() async {
    try {
      final prefs = await SharedPreferences.getInstance();

      _accessToken = prefs.getString(_accessTokenKey);
      _refreshToken = prefs.getString(_refreshTokenKey);

      final userDataJson = prefs.getString(_userDataKey);
      if (userDataJson != null) {
        final userData = json.decode(userDataJson);
        _currentUser = AuthUser.fromJson(userData);
      }

      // Se tem token, verificar se ainda √© v√°lido
      if (_accessToken != null) {
        final isValid = await _validateToken();
        if (!isValid) {
          await logout(); // Token inv√°lido, fazer logout
        } else {
          // üì± VERIFICAR E ATUALIZAR FCM TOKEN NA INICIALIZA√á√ÉO
          await _checkAndUpdateFcmToken();
        }
      }
    } catch (e) {
      print('‚ùå Erro ao inicializar AuthService: $e');
      await logout(); // Em caso de erro, limpar tudo
    }
  }

  /// üîê LOGIN
  Future<AuthResult> login(String email, String password) async {
    try {
      final response = await http.post(
        Uri.parse('$_userServiceUrl/auth/login'),
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: json.encode({'email': email, 'password': password}),
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body);

        // Salvar tokens
        _accessToken = data['data']['accessToken'];
        _refreshToken = data['data']['refreshToken'];

        // Salvar dados do usu√°rio
        _currentUser = AuthUser.fromJson(data['data']['user']);

        // Persistir dados
        final prefs = await SharedPreferences.getInstance();
        await prefs.setString(_accessTokenKey, _accessToken!);
        await prefs.setString(_refreshTokenKey, _refreshToken!);
        await prefs.setString(
          _userDataKey,
          json.encode(_currentUser!.toJson()),
        );

        // üì± VERIFICAR E ATUALIZAR FCM TOKEN AP√ìS LOGIN
        await _checkAndUpdateFcmToken();

        return AuthResult.success(
          message: 'Login realizado com sucesso',
          user: _currentUser!,
        );
      } else {
        final error = json.decode(response.body);
        return AuthResult.error(error['message'] ?? 'Falha ao fazer login');
      }
    } catch (e) {
      print('‚ùå Erro no login: $e');
      return AuthResult.error('Erro inesperado ao fazer login');
    }
  }

  /// üìù REGISTRO
  Future<AuthResult> register(
    String name,
    String email,
    String password,
  ) async {
    try {
      final response = await http.post(
        Uri.parse('$_userServiceUrl/auth/register'),
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: json.encode({
          'name': name,
          'email': email,
          'password': password,
          'fcmToken': await getToken(),
        }),
      );

      if (response.statusCode == 201) {
        final data = json.decode(response.body);

        // Salvar tokens
        _accessToken = data['data']['accessToken'];
        _refreshToken = data['data']['refreshToken'];

        // Salvar dados do usu√°rio
        _currentUser = AuthUser.fromJson(data['data']['user']);

        // Persistir dados
        final prefs = await SharedPreferences.getInstance();
        await prefs.setString(_accessTokenKey, _accessToken!);
        await prefs.setString(_refreshTokenKey, _refreshToken!);
        await prefs.setString(
          _userDataKey,
          json.encode(_currentUser!.toJson()),
        );

        // üì± SALVAR FCM TOKEN AP√ìS REGISTRO (j√° foi enviado no registro)
        final fcmToken = await getToken();
        if (fcmToken != null) {
          await saveCurrentFcmToken(fcmToken);
        }

        return AuthResult.success(
          message: 'Registro realizado com sucesso',
          user: AuthUser.fromJson(data['data']['user']),
        );
      } else {
        final error = json.decode(response.body);
        return AuthResult.error(error['message'] ?? 'Falha ao fazer registro');
      }
    } catch (e) {
      print('‚ùå Erro no registro: $e');
      return AuthResult.error('Erro inesperado ao fazer registro');
    }
  }

  /// üì± VERIFICAR E ATUALIZAR FCM TOKEN (fun√ß√£o centralizada)
  Future<void> _checkAndUpdateFcmToken() async {
    try {
      print('üîç Iniciando verifica√ß√£o de FCM token...');

      // Verificar se usu√°rio est√° autenticado
      if (!isAuthenticated) {
        print('üì± Usu√°rio n√£o est√° logado, pulando verifica√ß√£o de FCM token');
        return;
      }

      print('‚úÖ Usu√°rio autenticado: ${_currentUser?.id}');

      // Obter FCM token atual do Firebase
      final currentFcmToken = await getToken();
      print('üì± FCM Token atual: ${currentFcmToken?.substring(0, 20)}...');

      if (currentFcmToken != null) {
        // Verificar se o token mudou comparando com o token salvo
        final tokenChanged = await hasTokenChanged(currentFcmToken);
        print('üîÑ Token mudou: $tokenChanged');

        if (tokenChanged) {
          print('üì± FCM Token mudou, atualizando no servidor...');
          print('üåê URL: $_userServiceUrl/users/${_currentUser!.id}/fcm-token');
          print('üîë Token de acesso dispon√≠vel: ${_accessToken != null}');

          // Atualizar token no microservi√ßo de usu√°rio via PATCH
          await updateFcmTokenPatch(currentFcmToken);

          // Salvar novo token localmente para futuras compara√ß√µes
          await saveCurrentFcmToken(currentFcmToken);

          print('‚úÖ FCM Token atualizado com sucesso!');
        } else {
          print('üì± FCM Token n√£o mudou, nenhuma atualiza√ß√£o necess√°ria');
        }
      } else {
        print('‚ö†Ô∏è N√£o foi poss√≠vel obter FCM token do Firebase');
      }
    } catch (e) {
      print('‚ö†Ô∏è Erro ao verificar/atualizar FCM Token: $e');
      print('üìä Stack trace: ${StackTrace.current}');
      // N√£o falhar o processo por causa disso
    }
  }

  /// üö™ LOGOUT
  Future<void> logout() async {
    try {
      // Limpar dados locais
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_accessTokenKey);
      await prefs.remove(_refreshTokenKey);
      await prefs.remove(_userDataKey);

      // Limpar estado
      _accessToken = null;
      _refreshToken = null;
      _currentUser = null;

      // Limpar cache
      CacheService.clear();
    } catch (e) {
      print('‚ùå Erro ao fazer logout: $e');
      rethrow;
    }
  }

  /// üîÑ RENOVAR TOKENS
  Future<bool> refreshTokens() async {
    try {
      if (_refreshToken == null) return false;

      final response = await http.post(
        Uri.parse('$_userServiceUrl/auth/refresh'),
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: json.encode({'refreshToken': _refreshToken}),
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body);

        // Atualizar tokens
        _accessToken = data['data']['accessToken'];
        _refreshToken = data['data']['refreshToken'];

        // Persistir novos tokens
        final prefs = await SharedPreferences.getInstance();
        await prefs.setString(_accessTokenKey, _accessToken!);
        await prefs.setString(_refreshTokenKey, _refreshToken!);

        return true;
      }

      return false;
    } catch (e) {
      print('‚ùå Erro ao renovar tokens: $e');
      return false;
    }
  }

  /// ‚úÖ VALIDAR TOKEN
  Future<bool> _validateToken() async {
    try {
      final response = await http.get(
        Uri.parse('$_userServiceUrl/auth/validate'),
        headers: {
          'Authorization': 'Bearer $_accessToken',
          'Accept': 'application/json',
        },
      );

      return response.statusCode == 200;
    } catch (e) {
      print('‚ùå Erro ao validar token: $e');
      return false;
    }
  }

  /// üîë OBTER HEADERS COM TOKEN
  Map<String, String> getAuthHeaders() {
    return {
      'Authorization': 'Bearer $_accessToken',
      'Content-Type': 'application/json',
      'Accept': 'application/json',
    };
  }

  /// Verifica se o FCM token mudou comparando com o token salvo
  Future<bool> hasTokenChanged(String currentToken) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final savedToken = prefs.getString('fcm_token');

      // Se n√£o h√° token salvo ou se o token atual √© diferente do salvo
      return savedToken == null || savedToken != currentToken;
    } catch (e) {
      print('Erro ao verificar mudan√ßa de FCM token: $e');
      return true; // Em caso de erro, assumir que mudou para tentar atualizar
    }
  }

  /// Salva o FCM token atual localmente para futuras compara√ß√µes
  Future<void> saveCurrentFcmToken(String fcmToken) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('fcm_token', fcmToken);
    } catch (e) {
      print('Erro ao salvar FCM token: $e');
    }
  }

  /// Atualiza FCM token usando PATCH request para a nova rota espec√≠fica
  Future<void> updateFcmTokenPatch(String fcmToken) async {
    try {
      print('üöÄ Iniciando PATCH do FCM token...');

      if (_currentUser?.id == null) {
        throw Exception('Usu√°rio n√£o est√° logado - ID n√£o dispon√≠vel');
      }

      if (_accessToken == null) {
        throw Exception('Token de acesso n√£o dispon√≠vel');
      }

      final url = '$_userServiceUrl/users/${_currentUser!.id}/fcm-token';
      print('üåê URL do PATCH: $url');
      print(
        'üîë Authorization header: Bearer ${_accessToken!.substring(0, 20)}...',
      );

      final requestBody = json.encode({'fcmToken': fcmToken});
      print('üì¶ Request body: $requestBody');

      final response = await http.patch(
        Uri.parse(url),
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Authorization': 'Bearer $_accessToken',
        },
        body: requestBody,
      );

      print('üì° Response status: ${response.statusCode}');
      print('üìÑ Response body: ${response.body}');

      if (response.statusCode == 200) {
        print('‚úÖ FCM token atualizado via PATCH com sucesso');

        // Atualizar token no usu√°rio local tamb√©m
        if (_currentUser != null) {
          _currentUser = _currentUser!.copyWith(fcmToken: fcmToken);
          await _saveUserData(_currentUser!);
          print('üíæ Dados do usu√°rio atualizados localmente');
        }
      } else {
        final errorData = json.decode(response.body);
        throw Exception(
          'Erro HTTP ${response.statusCode}: ${errorData['message'] ?? 'Erro desconhecido'}',
        );
      }
    } catch (e) {
      print('‚ùå Erro ao atualizar FCM token via PATCH: $e');
      rethrow;
    }
  }

  /// M√©todo legado - manter para compatibilidade, mas usar o PATCH quando poss√≠vel
  Future<void> updateFcmToken(String fcmToken) async {
    try {
      final response = await http.put(
        Uri.parse('$_userServiceUrl/users/fcm-token'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $_accessToken',
        },
        body: json.encode({'fcmToken': fcmToken}),
      );

      if (response.statusCode != 200) {
        throw Exception('Erro ao atualizar FCM token');
      }
    } catch (e) {
      print('Erro ao atualizar FCM token: $e');
      rethrow;
    }
  }

  /// Salva dados do usu√°rio localmente
  Future<void> _saveUserData(AuthUser user) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(_userDataKey, json.encode(user.toJson()));
    } catch (e) {
      print('Erro ao salvar dados do usu√°rio: $e');
    }
  }

  /// Getter para verificar se est√° autenticado (compatibilidade)
  bool get isAuthenticated => isLoggedIn;
}

/// üë§ MODELO DE USU√ÅRIO PARA AUTENTICA√á√ÉO
class AuthUser {
  final String id;
  final String? nome;
  final String? email;
  final String? fcmToken;
  final bool isEmailVerified;
  final DateTime? lastLogin;

  AuthUser({
    required this.id,
    this.nome,
    this.email,
    this.fcmToken,
    this.isEmailVerified = false,
    this.lastLogin,
  });

  factory AuthUser.fromJson(Map<String, dynamic> json) {
    return AuthUser(
      id: json['id'],
      nome: json['name'],
      email: json['email'],
      fcmToken: json['fcmToken'],
      isEmailVerified: json['isEmailVerified'] ?? false,
      lastLogin:
          json['lastLogin'] != null ? DateTime.parse(json['lastLogin']) : null,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': nome,
      'email': email,
      'fcmToken': fcmToken,
      'isEmailVerified': isEmailVerified,
      'lastLogin': lastLogin?.toIso8601String(),
    };
  }

  /// Cria uma c√≥pia do usu√°rio com campos opcionalmente atualizados
  AuthUser copyWith({
    String? id,
    String? nome,
    String? email,
    String? fcmToken,
    bool? isEmailVerified,
    DateTime? lastLogin,
  }) {
    return AuthUser(
      id: id ?? this.id,
      nome: nome ?? this.nome,
      email: email ?? this.email,
      fcmToken: fcmToken ?? this.fcmToken,
      isEmailVerified: isEmailVerified ?? this.isEmailVerified,
      lastLogin: lastLogin ?? this.lastLogin,
    );
  }
}

/// üìã RESULTADO DE OPERA√á√ÉO DE AUTENTICA√á√ÉO
class AuthResult {
  final bool success;
  final String message;
  final AuthUser? user;

  AuthResult.success({required this.user, required this.message})
    : success = true;

  AuthResult.error(this.message) : success = false, user = null;
}
