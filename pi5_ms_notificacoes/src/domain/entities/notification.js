export default class Notification {
    constructor(
        id,
        userId,
        type,
        entityId,
        entityType,
        entityData,
        scheduledFor,
        status = 'PENDING'
    ) {
        this.id = id;
        this.userId = userId;
        this.type = type;
        this.entityId = entityId;
        this.entityType = entityType;
        this.entityData = entityData;
        this.scheduledFor = scheduledFor;
        this.status = status;
    }    // Gera o conte√∫do dinamicamente baseado no tipo
    generateContent() {
        switch (this.type) {
            // Eventos
            case 'EVENTO_CRIADO':
                return this.generateEventCreatedContent();
            case 'EVENTO_LEMBRETE_3_DIAS':
                return this.generateEventReminderContent(3);
            case 'EVENTO_DIA':
                return this.generateEventTodayContent();

            // Provas
            case 'PROVA_CRIADA':
                return this.generateExamCreatedContent();
            case 'PROVA_LEMBRETE_1_SEMANA':
                return this.generateExamWeekReminderContent();
            case 'PROVA_LEMBRETE_3_DIAS':
                return this.generateExamReminderContent(3);
            case 'PROVA_LEMBRETE_1_DIA':
                return this.generateExamReminderContent(1);
            case 'PROVA_DIA':
                return this.generateExamTodayContent();
            case 'PROVA_1_HORA':
                return this.generateExamOneHourContent();

            // Sess√µes
            case 'SESSAO_CRIADA':
                return this.generateSessionCreatedContent();
            case 'SESSAO_INICIADA':
                return this.generateSessionStartedContent();
            case 'SESSAO_LEMBRETE':
                return this.generateSessionReminderContent();

            // Tipos legados
            case 'EVENT_REMINDER':
                return this.generateEventReminderContent();
            case 'EVENT_TODAY':
                return this.generateEventTodayContent();
            case 'EVENT_CREATED':
                return this.generateEventCreatedContent();
            case 'EXAM_WEEK_REMINDER':
                return this.generateExamWeekReminderContent();
            case 'EXAM_REMINDER':
                return this.generateExamReminderContent();
            case 'EXAM_TODAY':
                return this.generateExamTodayContent();
            case 'EXAM_CREATED':
                return this.generateExamCreatedContent();
            case 'SESSION_CREATED':
                return this.generateSessionCreatedContent();
            case 'SESSION_FINISHED':
                return this.generateSessionFinishedContent();
            case 'STREAK_WARNING':
                return this.generateStreakWarningContent();
            case 'STREAK_EXPIRED':
                return this.generateStreakExpiredContent();
            default:
                return {
                    title: 'Notifica√ß√£o',
                    body: 'Voc√™ tem uma nova notifica√ß√£o'
                };
        }
    } generateEventReminderContent(days = null) {
        const daysDiff = days || this.getDaysDifference(this.entityData.date || this.entityData.data);
        const entityName = this.entityData.titulo || this.entityData.name || 'Evento';
        const entityDate = this.entityData.data || this.entityData.date;

        if (daysDiff === 3) {
            return {
                title: `‚è∞ Lembrete: ${entityName} em 3 dias`,
                body: `O evento "${entityName}" acontecer√° em 3 dias - ${new Date(entityDate).toLocaleDateString('pt-BR')}`
            };
        } else {
            return {
                title: `Lembrete: ${entityName}`,
                body: `O evento acontecer√° em ${daysDiff} dias - ${new Date(entityDate).toLocaleDateString('pt-BR')}`
            };
        }
    }

    generateEventTodayContent() {
        const entityName = this.entityData.titulo || this.entityData.name || 'Evento';
        const entityTime = this.entityData.horario || this.entityData.time;
        const timeStr = entityTime ? new Date(entityTime).toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' }) : '';

        return {
            title: `üî• HOJE: ${entityName}!`,
            body: `O evento "${entityName}" acontece hoje${timeStr ? ` √†s ${timeStr}` : ''}! üéØ`
        };
    }

    generateEventCreatedContent() {
        const entityName = this.entityData.titulo || this.entityData.name || 'Evento';
        const entityDate = this.entityData.data || this.entityData.date;

        return {
            title: `üìÖ Novo evento criado`,
            body: `"${entityName}" foi adicionado para ${new Date(entityDate).toLocaleDateString('pt-BR')}`
        };
    }

    generateExamWeekReminderContent() {
        const entityName = this.entityData.titulo || this.entityData.name || 'Prova';
        const entityDate = this.entityData.data || this.entityData.date;

        return {
            title: `üìö Prova se aproximando`,
            body: `A prova "${entityName}" acontecer√° em 1 semana - ${new Date(entityDate).toLocaleDateString('pt-BR')}`
        };
    } generateExamReminderContent(days = null) {
        const daysDiff = days || this.getDaysDifference(this.entityData.date || this.entityData.data);
        const entityName = this.entityData.titulo || this.entityData.name || 'Prova';
        const entityDate = this.entityData.data || this.entityData.date;
        const entityTime = this.entityData.horario || this.entityData.time;

        if (daysDiff === 1) {
            return {
                title: `üîî AMANH√É √© dia de prova!`,
                body: `A prova "${entityName}" √© AMANH√É! üìö\n‚úÖ Separe seus materiais\n‚úÖ Descanse bem\n‚úÖ Confie no seu preparo!`
            };
        } else if (daysDiff === 3) {
            return {
                title: `‚è∞ Prova em 3 dias - Revis√£o final!`,
                body: `A prova "${entityName}" √© em 3 dias! üéØ\nFa√ßa uma revis√£o geral dos t√≥picos principais!`
            };
        } else {
            return {
                title: `‚è∞ Lembrete: Prova em ${daysDiff} dias`,
                body: `Prova "${entityName}" - ${new Date(entityDate).toLocaleDateString('pt-BR')}`
            };
        }
    }

    generateExamOneHourContent() {
        const entityName = this.entityData.titulo || this.entityData.name || 'Prova';
        const entityLocal = this.entityData.local || 'Local da prova';
        return {
            title: `‚è∞ Prova em 1 hora!`,
            body: `Sua prova "${entityName}" come√ßa em 1 hora! ‚è∞\n\n‚úÖ Verifique seus materiais\n‚úÖ Saia com anteced√™ncia\n‚úÖ Mantenha a calma!\n\nüìç ${entityLocal}`
        };
    }

    generateSessionStartedContent() {
        const sessionName = this.entityData.conteudo || this.entityData.name || 'Sess√£o de estudo';
        return {
            title: `üéØ Sess√£o iniciada!`,
            body: `Sua sess√£o "${sessionName}" come√ßou! Foque e d√™ o seu melhor! üí™`
        };
    }

    generateSessionReminderContent() {
        const sessionName = this.entityData.conteudo || this.entityData.name || 'Sess√£o de estudo';
        return {
            title: `üìö Lembrete de sess√£o`,
            body: `N√£o esque√ßa da sua sess√£o "${sessionName}" hoje! üìÖ`
        };
    } generateExamTodayContent() {
        const entityName = this.entityData.titulo || this.entityData.name || 'Prova';
        const entityTime = this.entityData.horario || this.entityData.time;
        const timeStr = entityTime ? new Date(entityTime).toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' }) : '';

        return {
            title: `üéØ HOJE √© dia de prova!`,
            body: `Hoje √© o dia da prova "${entityName}"${timeStr ? ` √†s ${timeStr}` : ''}! Voc√™ se preparou bem! Confie em si mesmo! üí™üçÄ Boa sorte!`
        };
    }

    generateExamCreatedContent() {
        const entityName = this.entityData.titulo || this.entityData.name || 'Prova';
        const entityDate = this.entityData.data || this.entityData.date;

        return {
            title: `ÔøΩ Nova prova cadastrada`,
            body: `Prova "${entityName}" agendada para ${new Date(entityDate).toLocaleDateString('pt-BR')}`
        };
    }

    generateSessionCreatedContent() {
        const sessionName = this.entityData.conteudo || this.entityData.name || 'Sess√£o de estudo';

        return {
            title: `üìö Sess√£o de estudo criada`,
            body: `Sess√£o "${sessionName}" foi criada! Organize-se e bons estudos! üí™`
        };
    }

    generateSessionFinishedContent() {
        const score = this.entityData.score ? ` - Pontua√ß√£o: ${this.entityData.score}%` : '';
        return {
            title: `‚úÖ Sess√£o conclu√≠da`,
            body: `Parab√©ns! Voc√™ finalizou a sess√£o de ${this.entityData.name}${score}`
        };
    }

    generateStreakWarningContent() {
        const hoursLeft = this.getHoursUntilMidnight();
        return {
            title: `‚ö†Ô∏è Sua sequ√™ncia ${this.entityData.name} expira hoje!`,
            body: `Voc√™ tem ${hoursLeft} horas para completar sua sequ√™ncia de ${this.entityData.currentCount} dias`
        };
    }

    generateStreakExpiredContent() {
        return {
            title: `üíî Sequ√™ncia perdida`,
            body: `Sua sequ√™ncia ${this.entityData.name} de ${this.entityData.previousCount} dias foi perdida. Comece uma nova!`
        };
    }

    getDaysDifference(targetDate) {
        const today = new Date();
        const target = new Date(targetDate);
        const diffTime = target - today;
        return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    }

    getHoursUntilMidnight() {
        const now = new Date();
        const midnight = new Date();
        midnight.setHours(24, 0, 0, 0);
        return Math.ceil((midnight - now) / (1000 * 60 * 60));
    }

    static fromJson(json) {
        return new Notification(
            json.id,
            json.userId,
            json.type,
            json.entityId,
            json.entityType,
            json.entityData,
            json.scheduledFor,
            json.status
        );
    }

    toJson() {
        return {
            id: this.id,
            userId: this.userId,
            type: this.type,
            entityId: this.entityId,
            entityType: this.entityType,
            entityData: this.entityData,
            scheduledFor: this.scheduledFor,
            status: this.status
        };
    }
}