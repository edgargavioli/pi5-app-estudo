import amqp from 'amqplib';
import { logger } from '../../application/utils/logger.js';

/**
 * RabbitMQ Service - PI5 MS Provas
 * Respons√°vel por publicar eventos de sess√µes e provas
 */
class RabbitMQService {
  constructor() {
    this.connection = null;
    this.channel = null;
    this.isConnected = false;
    this.reconnectAttempts = 0;
    this.maxReconnectAttempts = 10;
    this.reconnectDelay = 5000;

    // Configura√ß√µes do ambiente
    this.config = {
      url: process.env.RABBITMQ_URL || 'amqp://admin:admin123@localhost:5672/',
      exchange: process.env.RABBITMQ_EXCHANGE || 'pi5_events',
      serviceName: process.env.SERVICE_NAME || 'provas-service'
    };

    this.routingKeys = {
      // Eventos que Provas Service PUBLICA
      SESSAO_CRIADA: 'provas.sessao.criada',
      SESSAO_FINALIZADA: 'provas.sessao.finalizada',
      PROVA_FINALIZADA: 'provas.prova.finalizada',

      // Eventos CRUD gen√©ricos - alinhados com as filas do consumer
      EVENT_CREATED: 'event.created',
      EVENT_UPDATED: 'event.updated',
      EVENT_DELETED: 'event.deleted',

      // Eventos de exames
      EXAM_CREATED: 'exam.created',
      EXAM_UPDATED: 'exam.updated',
      EXAM_DELETED: 'exam.deleted',

      // Eventos que Provas Service CONSOME (do User Service)
      PONTOS_ATUALIZADOS: 'user.pontos.atualizados',
      NIVEL_ALTERADO: 'user.nivel.alterado',
      CONQUISTA_DESBLOQUEADA: 'user.conquista.desbloqueada'
    };

    // Filas que este servi√ßo consome e publica
    this.queues = {
      PROVAS_SYNC: `${this.config.serviceName}.sync.updates`,
      EVENT_CREATED: process.env.EVENT_QUEUE || 'event.created',
      EVENT_UPDATED: process.env.EVENT_UPDATED_QUEUE || 'event.updated',
      EVENT_DELETED: process.env.EVENT_DELETED_QUEUE || 'event.deleted',
      EXAM_CREATED: process.env.EXAM_QUEUE || 'exam.created',
      EXAM_UPDATED: process.env.EXAM_UPDATED_QUEUE || 'exam.updated',
      EXAM_DELETED: process.env.EXAM_DELETED_QUEUE || 'exam.deleted',
      SESSAO_CRIADA: process.env.SESSAO_CRIADA_QUEUE || 'sessao.criada',
      SESSAO_FINALIZADA: process.env.SESSAO_FINALIZADA_QUEUE || 'sessao.finalizada'
    };
  }

  /**
   * Conecta ao RabbitMQ com retry autom√°tico
   */
  async connect() {
    try {
      logger.info('Tentando conectar ao RabbitMQ...', {
        url: this.config.url.replace(/\/\/.*@/, '//***:***@'),
        attempt: this.reconnectAttempts + 1
      });

      this.connection = await amqp.connect(this.config.url);
      this.channel = await this.connection.createChannel();

      // Configurar tratamento de erros
      this.connection.on('error', this.handleConnectionError.bind(this));
      this.connection.on('close', this.handleConnectionClose.bind(this));
      this.channel.on('error', this.handleChannelError.bind(this));

      // Configurar exchange principal
      await this.channel.assertExchange(this.config.exchange, 'topic', {
        durable: true,
        autoDelete: false
      });

      // Configurar filas se necess√°rio
      await this.setupQueues();

      this.isConnected = true;
      this.reconnectAttempts = 0;

      logger.info('‚úÖ Conectado ao RabbitMQ com sucesso!', {
        exchange: this.config.exchange,
        serviceName: this.config.serviceName
      });

      return true;
    } catch (error) {
      logger.error('‚ùå Erro ao conectar ao RabbitMQ', {
        error: error.message,
        attempt: this.reconnectAttempts + 1
      });

      await this.handleReconnect();
      return false;
    }
  }

  /**
   * Configura filas necess√°rias (se houver)
   */
  async setupQueues() {
    // Configurar filas CRUD - removendo argumentos espec√≠ficos que podem causar conflito
    for (const [queueName, queueKey] of Object.entries(this.queues)) {
      try {
        await this.channel.assertQueue(queueKey, {
          durable: true
          // Removidos argumentos espec√≠ficos para evitar conflitos com filas existentes
        });
      } catch (error) {
        logger.warn(`‚ö†Ô∏è Erro ao configurar fila ${queueKey}, tentando sem argumentos`, {
          error: error.message
        });

        // Tentar criar fila b√°sica sem argumentos adicionais
        await this.channel.assertQueue(queueKey, {
          durable: true
        });
      }
    }

    logger.info('üîß Filas RabbitMQ configuradas', {
      queues: Object.values(this.queues)
    });
  }

  /**
   * Publica evento de sess√£o criada
   */
  async publishSessaoCriada(sessaoData) {
    const event = {
      data: {
        userId: sessaoData.userId || 'user-default', // TODO: Implementar autentica√ß√£o
        sessaoId: sessaoData.id,
        materiaId: sessaoData.materiaId,
        provaId: sessaoData.provaId,
        tempoInicio: sessaoData.tempoInicio,
        conteudo: sessaoData.conteudo,
        topicos: sessaoData.topicos
      }
    };

    return this.publish(this.routingKeys.SESSAO_CRIADA, event);
  }

  /**
   * Publica evento de sess√£o finalizada
   */
  async publishSessaoFinalizada(sessaoData) {
    // Calcular tempo de estudo em minutos
    const tempoInicioMs = new Date(sessaoData.tempoInicio).getTime();
    const tempoFimMs = new Date(sessaoData.tempoFim).getTime();
    const tempoEstudoMinutos = Math.floor((tempoFimMs - tempoInicioMs) / (1000 * 60));

    const event = {
      data: {
        userId: sessaoData.userId || 'user-default', // TODO: Implementar autentica√ß√£o
        sessaoId: sessaoData.id,
        materiaId: sessaoData.materiaId,
        provaId: sessaoData.provaId,
        tempoEstudo: tempoEstudoMinutos,
        tempoInicio: sessaoData.tempoInicio,
        tempoFim: sessaoData.tempoFim,
        conteudo: sessaoData.conteudo,
        questoesAcertadas: sessaoData.questoesAcertadas || 0,
        totalQuestoes: sessaoData.totalQuestoes || 0
      }
    };

    return this.publish(this.routingKeys.SESSAO_FINALIZADA, event);
  }

  /**
   * Publica evento de prova finalizada
   */
  async publishProvaFinalizada(provaData) {
    const event = {
      data: {
        userId: provaData.userId || 'user-default', // TODO: Implementar autentica√ß√£o
        provaId: provaData.id,
        materiaId: provaData.materiaId,
        questoesAcertadas: provaData.questoesAcertadas,
        totalQuestoes: provaData.totalQuestoes,
        percentualAcerto: provaData.percentualAcerto,
        dataRealizacao: provaData.dataRealizacao || new Date().toISOString()
      }
    };

    return this.publish(this.routingKeys.PROVA_FINALIZADA, event);
  }

  /**
   * Publica evento de entidade criada
   */
  async publishEntityCreated(entityType, entityData, userId = null) {
    const event = {
      data: {
        entityType,
        entityId: entityData.id,
        entityData,
        userId: userId || entityData.userId || 'user-default',
        action: 'CREATED'
      }
    };

    return this.publish(this.routingKeys.EVENT_CREATED, event);
  }

  /**
   * Publica evento de entidade editada
   */
  async publishEntityUpdated(entityType, entityId, updatedData, previousData = null, userId = null) {
    const event = {
      data: {
        entityType,
        entityId,
        updatedData,
        previousData,
        userId: userId || updatedData.userId || 'user-default',
        action: 'UPDATED'
      }
    };

    return this.publish(this.routingKeys.EVENT_UPDATED, event);
  }

  /**
   * Publica evento de entidade deletada
   */
  async publishEntityDeleted(entityType, entityId, deletedData = null, userId = null) {
    const event = {
      data: {
        entityType,
        entityId,
        deletedData,
        userId: userId || deletedData?.userId || 'user-default',
        action: 'DELETED'
      }
    };

    return this.publish(this.routingKeys.EVENT_DELETED, event);
  }

  /**
   * Publica evento de exame criado
   */
  async publishExamCreated(examType, examData, userId = null) {
    const event = {
      data: {
        examType,
        examId: examData.id,
        examData: {
          name: examData.titulo,
          description: examData.descricao,
          date: examData.data || new Date().toISOString(),
        },
        userId: userId || examData.userId || 'user-default',
        action: 'CREATED'
      }
    };

    // Usar a fila diretamente, n√£o o routing key
    return this.publish(this.queues.EXAM_CREATED, event);
  }

  /**
   * Publica evento de exame editado
   */
  async publishExamUpdated(examType, examId, updatedData, previousData = null, userId = null) {
    const event = {
      data: {
        examType,
        examId,
        updatedData,
        previousData,
        userId: userId || updatedData.userId || 'user-default',
        action: 'UPDATED'
      }
    };

    return this.publish(this.queues.EXAM_UPDATED, event);
  }

  /**
   * Publica evento de exame deletado
   */
  async publishExamDeleted(examType, examId, deletedData = null, userId = null) {
    const event = {
      data: {
        examType,
        examId,
        deletedData,
        userId: userId || deletedData?.userId || 'user-default',
        action: 'DELETED'
      }
    };

    return this.publish(this.routingKeys.EXAM_DELETED, event);
  }

  /**
   * Producer gen√©rico para eventos CRUD
   * @param {string} action - 'created', 'updated' ou 'deleted'
   * @param {string} entityType - Tipo da entidade (ex: 'prova', 'sessao', 'questao')
   * @param {string} entityId - ID da entidade
   * @param {Object} data - Dados da entidade
   * @param {Object} options - Op√ß√µes adicionais (userId, previousData, etc.)
   */
  async publishCrudEvent(action, entityType, entityId, data, options = {}) {
    const routingKeyMap = {
      created: this.routingKeys.EVENT_CREATED,
      updated: this.routingKeys.EVENT_UPDATED,
      deleted: this.routingKeys.EVENT_DELETED
    };

    const routingKey = routingKeyMap[action.toLowerCase()];
    if (!routingKey) {
      logger.error('‚ùå A√ß√£o CRUD inv√°lida', { action, validActions: Object.keys(routingKeyMap) });
      return false;
    }

    const event = {
      data: {
        entityType,
        entityId,
        entityData: data,
        userId: options.userId || data?.userId || 'user-default',
        action: action.toUpperCase(),
        ...(action === 'updated' && options.previousData && { previousData: options.previousData }),
        ...(options.metadata && { metadata: options.metadata })
      }
    };

    return this.publish(routingKey, event);
  }

  /**
   * Producer gen√©rico para eventos de exames
   * @param {string} action - 'created', 'updated' ou 'deleted'
   * @param {string} examType - Tipo do exame (ex: 'prova', 'simulado', 'teste')
   * @param {string} examId - ID do exame
   * @param {Object} data - Dados do exame
   * @param {Object} options - Op√ß√µes adicionais (userId, previousData, etc.)
   */
  async publishExamEvent(action, examType, examId, data, options = {}) {
    const routingKeyMap = {
      created: this.routingKeys.EXAM_CREATED,
      updated: this.routingKeys.EXAM_UPDATED,
      deleted: this.routingKeys.EXAM_DELETED
    };

    const routingKey = routingKeyMap[action.toLowerCase()];
    if (!routingKey) {
      logger.error('‚ùå A√ß√£o de exame inv√°lida', { action, validActions: Object.keys(routingKeyMap) });
      return false;
    }

    const event = {
      data: {
        examType,
        examId,
        examData: data,
        userId: options.userId || data?.userId || 'user-default',
        action: action.toUpperCase(),
        ...(action === 'updated' && options.previousData && { previousData: options.previousData }),
        ...(options.metadata && { metadata: options.metadata })
      }
    };

    return this.publish(routingKey, event);
  }

  /**
   * M√©todo b√°sico para publicar eventos
   */
  async publish(routingKey, data, options = {}) {
    if (!this.isConnected || !this.channel) {
      logger.error('‚ùå RabbitMQ n√£o conectado para publicar evento', { routingKey });
      return false;
    }

    try {
      const message = {
        messageId: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        timestamp: new Date().toISOString(),
        source: this.config.serviceName,
        routingKey,
        data
      };

      const messageBuffer = Buffer.from(JSON.stringify(message));

      const published = await this.channel.publish(
        this.config.exchange,
        routingKey,
        messageBuffer,
        {
          persistent: true,
          timestamp: Date.now(),
          ...options
        }
      );

      if (published) {
        logger.info('üì§ Evento publicado com sucesso', {
          routingKey,
          messageId: message.messageId,
          exchange: this.config.exchange
        });
      }

      return published;
    } catch (error) {
      logger.error('‚ùå Erro ao publicar evento', {
        routingKey,
        error: error.message
      });
      return false;
    }
  }  /**
   * Publica evento simples de notifica√ß√£o para evento criado
   */
  async publishEventoNotificacao(eventoData) {
    const event = {
      data: {
        ...eventoData,
        userId: eventoData.userId || 'user-default'
      }
    };

    return this.publish('notificacao.evento.criado', event);
  }

  /**
   * Publica evento simples de notifica√ß√£o para sess√£o criada
   */
  async publishSessaoNotificacao(sessaoData) {
    const event = {
      data: {
        ...sessaoData,
        userId: sessaoData.userId || 'user-default'
      }
    };

    return this.publish('notificacao.sessao.criada', event);
  }
            acoes: ['finalizar_preparacao', 'mentalizar_objetivos', 'postura_estudo']
          }
        });
      }

      // Lembrete no momento exato da sess√£o
      event.data.notificacoes.push({
        tipo: 'lembrete_inicio',
        dataEnvio: tempoInicio.toISOString(),
        titulo: `üöÄ ${contextoSessao.emoji} AGORA: ${contextoSessao.titulo}!`,
        mensagem: `${contextoSessao.mensagemInicio} "${sessaoData.conteudo}"! üéØ\n\n${contextoSessao.ritualInicio}\n\nüìö Foco total em: ${sessaoData.topicos?.join(', ') || 'seus objetivos'}\n\n‚è±Ô∏è Dura√ß√£o: ${duracao}\n\n${contextoSessao.motivacao}\n\nüß† ${contextoSessao.tecnicaConcentracao}`,
        prioridade: 'critica',
        categoria: 'sessao_inicio',
        dados: {
          topicos: sessaoData.topicos,
          duracao: duracao,
          tecnicas: contextoSessao.tecnicasEstudo,
          pausas: contextoSessao.intervalos,
          meta: contextoSessao.metaSessao,
          acoes: ['iniciar_cronometro', 'aplicar_pomodoro', 'modo_foco_total', 'postura_correta']
        }
      });

      // Se a sess√£o for longa (>2h), adicionar lembrete de pausa
      if (sessaoData.tempoFim) {
        const fimSessao = new Date(sessaoData.tempoFim);
        const duracaoMs = fimSessao - tempoInicio;
        const duracaoHoras = duracaoMs / (1000 * 60 * 60);

        if (duracaoHoras > 2) {
          const metadeSessao = new Date(tempoInicio.getTime() + duracaoMs / 2);
          event.data.notificacoes.push({
            tipo: 'lembrete_pausa',
            dataEnvio: metadeSessao.toISOString(),
            titulo: `üßò‚Äç‚ôÄÔ∏è ${contextoSessao.emoji} Hora da Pausa Revigorante!`,
            mensagem: `Voc√™ est√° no meio da sua sess√£o de ${contextoSessao.titulo.toLowerCase()}! üí™\n\nüéâ Parab√©ns pelo foco at√© aqui!\n\n‚è∏Ô∏è Fa√ßa uma pausa de 15-20 minutos:\n‚Ä¢ Alongue-se ü§∏‚Äç‚ôÄÔ∏è\n‚Ä¢ Hidrate-se üíß\n‚Ä¢ Respire ar puro üå±\n‚Ä¢ Descanse os olhos üëÄ\n\n${contextoSessao.dicaPausa}\n\nDepois volte com tudo! üî•`,
            prioridade: 'media',
            categoria: 'pausa_sessao',
            dados: {
              progressoAtual: '50%',
              tempoRestante: this._calcularDuracaoSessao({ tempoInicio: metadeSessao, tempoFim: sessaoData.tempoFim }),
              proximosTopicos: sessaoData.topicos?.slice(Math.ceil(sessaoData.topicos.length / 2)) || [],
              acoes: ['alongar', 'hidratar', 'respirar', 'descansar_olhos']
            }
          });
        }
      }
    }

    return this.publish('notificacao.sessao.criada', event);
  }
  /**
   * Contexto personalizado para sess√µes baseado no conte√∫do
   */
  _getSessaoContexto(sessaoData) {
    const conteudo = (sessaoData.conteudo || '').toLowerCase();
    const topicos = (sessaoData.topicos || []).join(' ').toLowerCase();
    const texto = `${conteudo} ${topicos}`;

    // Detectar contexto baseado no conte√∫do com contextos muito mais ricos
    if (texto.includes('matem√°tica') || texto.includes('c√°lculo') || texto.includes('√°lgebra') ||
      texto.includes('geometria') || texto.includes('trigonometria') || texto.includes('fun√ß√£o') ||
      texto.includes('equa√ß√£o') || texto.includes('logaritmo') || texto.includes('matriz')) {
      return {
        emoji: 'üî¢',
        materia: 'Matem√°tica',
        titulo: 'Sess√£o de Matem√°tica',
        tipo: 'exata',
        dificuldade: 'alta',
        mensagemCriacao: 'Sua sess√£o de matem√°tica',
        descricaoDetalhada: 'A matem√°tica √© a linguagem do universo! Cada problema resolvido √© uma vit√≥ria.',
        dicaPreparacao: 'üí° Tenha sempre papel, l√°pis, borracha e calculadora √† m√£o!',
        lembretePreparacao: 'Prepare suas ferramentas matem√°ticas!',
        checklistPreparacao: '‚úÖ F√≥rmulas importantes\n‚úÖ Calculadora cient√≠fica\n‚úÖ Papel milimetrado\n‚úÖ R√©gua e compasso',
        dicaUltimahora: 'Revise as f√≥rmulas b√°sicas antes de come√ßar!',
        ultimoAviso: '√â hora de dominar os n√∫meros!',
        fraseMotivacional: '"A matem√°tica √© o alfabeto com o qual Deus escreveu o universo" - Galileu',
        objetivosEspecificos: '‚Ä¢ Resolver exerc√≠cios pr√°ticos\n‚Ä¢ Memorizar f√≥rmulas-chave\n‚Ä¢ Entender conceitos fundamentais',
        boostFinal: 'Cada c√°lculo correto √© um passo para o sucesso! üßÆ',
        mensagemInicio: 'Vamos dominar os n√∫meros!',
        ritualInicio: 'üî¢ Respire, organize suas f√≥rmulas e vamos calcular!',
        motivacao: 'Cada problema resolvido √© um passo para a excel√™ncia! üìê',
        tecnicaConcentracao: 'Use o m√©todo "ver-fazer-explicar": veja o exemplo, fa√ßa similar, explique o processo.',
        preparacao: 'Separe: calculadora, l√°pis, borracha e muita determina√ß√£o! üßÆ',
        ferramentas: ['Calculadora cient√≠fica', 'Papel milimetrado', 'R√©gua', 'Compasso', 'Tabela de f√≥rmulas'],
        tecnicasEstudo: ['Resolu√ß√£o progressiva', 'Mapas conceituais', 'Exerc√≠cios pr√°ticos'],
        intervalos: 'A cada 45 min: pausa de 10 min para evitar fadiga mental',
        metaSessao: 'Dominar conceitos e resolver exerc√≠cios com confian√ßa',
        objetivo: 'Desenvolver racioc√≠nio l√≥gico-matem√°tico',
        dicas: ['Sempre confira os c√°lculos', 'Desenhe quando poss√≠vel', 'Use exemplos pr√°ticos'],
        dicaPausa: 'Fa√ßa um exerc√≠cio f√≠sico leve - isso oxigena o c√©rebro para c√°lculos!',
        ambienteIdeal: 'Mesa organizada, boa ilumina√ß√£o, sem ru√≠dos',
        estadoMentalIdeal: 'Calmo, focado e paciente',
        checklist: ['Materiais de escrita', 'Calculadora', 'F√≥rmulas', 'Exerc√≠cios selecionados']
      };
    }

    if (texto.includes('f√≠sica') || texto.includes('mec√¢nica') || texto.includes('eletricidade') ||
      texto.includes('√≥ptica') || texto.includes('termodin√¢mica') || texto.includes('ondas') ||
      texto.includes('for√ßa') || texto.includes('energia') || texto.includes('movimento')) {
      return {
        emoji: '‚ö°',
        materia: 'F√≠sica',
        titulo: 'Sess√£o de F√≠sica',
        tipo: 'exata',
        dificuldade: 'alta',
        mensagemCriacao: 'Sua sess√£o de f√≠sica',
        descricaoDetalhada: 'A f√≠sica desvenda os segredos do universo! Cada lei compreendida expande nossa vis√£o.',
        dicaPreparacao: 'üî¨ Prepare experimentos mentais e visualize os fen√¥menos!',
        lembretePreparacao: 'Prepare-se para desvendar as leis do universo!',
        checklistPreparacao: '‚úÖ Tabela de f√≥rmulas\n‚úÖ Calculadora cient√≠fica\n‚úÖ Diagrama de for√ßas\n‚úÖ Constantes f√≠sicas',
        dicaUltimahora: 'Visualize os fen√¥menos em sua mente antes de aplicar f√≥rmulas!',
        ultimoAviso: 'As leis da f√≠sica te aguardam!',
        fraseMotivacional: '"A imagina√ß√£o √© mais importante que o conhecimento" - Einstein',
        objetivosEspecificos: '‚Ä¢ Compreender fen√¥menos f√≠sicos\n‚Ä¢ Aplicar leis e princ√≠pios\n‚Ä¢ Resolver problemas pr√°ticos',
        boostFinal: 'Voc√™ est√° prestes a compreender o universo! üåå',
        mensagemInicio: 'Hora de desvendar o universo!',
        ritualInicio: '‚ö° Imagine os fen√¥menos, visualize as for√ßas e aplique as leis!',
        motivacao: 'A f√≠sica explica tudo ao nosso redor! Seja curioso(a)! üåå',
        tecnicaConcentracao: 'T√©cnica "Fen√¥meno-Lei-Aplica√ß√£o": observe o fen√¥meno, identifique a lei, aplique na pr√°tica.',
        preparacao: 'Tenha f√≥rmulas, calculadora e imagina√ß√£o prontas! üöÄ',
        ferramentas: ['Tabela de constantes', 'Calculadora', 'Diagramas', 'Gr√°ficos', 'Simuladores online'],
        tecnicasEstudo: ['Experimentos mentais', 'Diagramas de for√ßa', 'Analogias pr√°ticas'],
        intervalos: 'A cada 50 min: pausa ativa com movimento para internalizar conceitos de movimento',
        metaSessao: 'Compreender princ√≠pios f√≠sicos e aplic√°-los corretamente',
        objetivo: 'Desenvolver pensamento cient√≠fico e anal√≠tico',
        dicas: ['Sempre desenhe diagramas', 'Use analogias do cotidiano', 'Visualize antes de calcular'],
        dicaPausa: 'Observe a f√≠sica ao seu redor durante a pausa - a gravidade, o movimento, a luz!',
        ambienteIdeal: 'Espa√ßo para desenhar, boa ventila√ß√£o, materiais visuais',
        estadoMentalIdeal: 'Curioso, questionador e observador',
        checklist: ['F√≥rmulas f√≠sicas', 'Constantes', 'Papel para diagramas', 'Calculadora cient√≠fica']
      };
    }

    if (texto.includes('qu√≠mica') || texto.includes('org√¢nica') || texto.includes('rea√ß√µes') ||
      texto.includes('√°tomo') || texto.includes('mol√©cula') || texto.includes('elemento') ||
      texto.includes('liga√ß√£o') || texto.includes('pH') || texto.includes('equil√≠brio')) {
      return {
        emoji: 'üß™',
        materia: 'Qu√≠mica',
        titulo: 'Sess√£o de Qu√≠mica',
        tipo: 'exata',
        dificuldade: 'alta',
        mensagemCriacao: 'Sua sess√£o de qu√≠mica',
        descricaoDetalhada: 'A qu√≠mica √© a arte de transformar! Cada rea√ß√£o √© uma dan√ßa molecular fascinante.',
        dicaPreparacao: '‚öóÔ∏è Visualize as mol√©culas e suas intera√ß√µes tridimensionais!',
        lembretePreparacao: 'Prepare o laborat√≥rio mental!',
        checklistPreparacao: '‚úÖ Tabela peri√≥dica\n‚úÖ F√≥rmulas estruturais\n‚úÖ Calculadora\n‚úÖ Papel para estruturas',
        dicaUltimahora: 'Relembre os grupos funcionais e tipos de rea√ß√µes!',
        ultimoAviso: 'As mol√©culas est√£o prontas para reagir!',
        fraseMotivacional: '"Na qu√≠mica, n√£o h√° nada mais excitante que uma rea√ß√£o inesperada"',
        objetivosEspecificos: '‚Ä¢ Entender estruturas moleculares\n‚Ä¢ Prever rea√ß√µes qu√≠micas\n‚Ä¢ Balancear equa√ß√µes',
        boostFinal: 'Voc√™ √© o qu√≠mico das suas transforma√ß√µes! ‚öóÔ∏è',
        mensagemInicio: 'Vamos criar algumas rea√ß√µes!',
        ritualInicio: 'üß™ Organize sua tabela peri√≥dica e visualize as transforma√ß√µes!',
        motivacao: 'A qu√≠mica est√° em tudo! Transforme conhecimento em sucesso! ‚öóÔ∏è',
        tecnicaConcentracao: 'M√©todo "Ver-Analisar-Prever": veja a estrutura, analise propriedades, preveja comportamento.',
        preparacao: 'Tabela peri√≥dica, f√≥rmulas e muita concentra√ß√£o! üî¨',
        ferramentas: ['Tabela peri√≥dica', 'Modelos moleculares', 'Calculadora', 'Papel para estruturas'],
        tecnicasEstudo: ['Modelos tridimensionais', 'Mapas de rea√ß√µes', 'Flashcards de grupos funcionais'],
        intervalos: 'A cada 45 min: pausa para "reagir" com o ambiente - o ar que respiramos √© qu√≠mica!',
        metaSessao: 'Dominar rea√ß√µes e compreender transforma√ß√µes moleculares',
        objetivo: 'Desenvolver vis√£o molecular e capacidade de predi√ß√£o',
        dicas: ['Desenhe sempre as estruturas', 'Use modelos 3D mentais', 'Pense em analogias do dia a dia'],
        dicaPausa: 'Observe a qu√≠mica ao redor: a digest√£o, a fotoss√≠ntese, a oxida√ß√£o!',
        ambienteIdeal: 'Mesa limpa e organizada como um laborat√≥rio, boa ventila√ß√£o',
        estadoMentalIdeal: 'Organizado, met√≥dico e criativo',
        checklist: ['Tabela peri√≥dica', 'F√≥rmulas de compostos', 'Papel para estruturas', 'Calculadora']
      };
    }

    if (texto.includes('hist√≥ria') || texto.includes('brasil') || texto.includes('mundo') ||
      texto.includes('guerra') || texto.includes('revolu√ß√£o') || texto.includes('imp√©rio') ||
      texto.includes('rep√∫blica') || texto.includes('col√¥nia') || texto.includes('civiliza√ß√£o')) {
      return {
        emoji: 'üèõÔ∏è',
        materia: 'Hist√≥ria',
        titulo: 'Sess√£o de Hist√≥ria',
        tipo: 'humana',
        dificuldade: 'm√©dia',
        mensagemCriacao: 'Sua sess√£o de hist√≥ria',
        descricaoDetalhada: 'A hist√≥ria √© a mem√≥ria da humanidade! Cada √©poca tem li√ß√µes para nossa vida.',
        dicaPreparacao: 'üìú Prepare cronologias e conecte eventos passados ao presente!',
        lembretePreparacao: 'Prepare sua m√°quina do tempo mental!',
        checklistPreparacao: '‚úÖ Linha do tempo\n‚úÖ Mapas hist√≥ricos\n‚úÖ Lista de datas importantes\n‚úÖ Biografias-chave',
        dicaUltimahora: 'Conecte os eventos: causa e consequ√™ncia s√£o fundamentais!',
        ultimoAviso: 'A m√°quina do tempo est√° pronta!',
        fraseMotivacional: '"Quem n√£o conhece a hist√≥ria est√° condenado a repeti-la" - George Santayana',
        objetivosEspecificos: '‚Ä¢ Compreender processos hist√≥ricos\n‚Ä¢ Conectar causa e consequ√™ncia\n‚Ä¢ Analisar fontes hist√≥ricas',
        boostFinal: 'Voc√™ √© um viajante do tempo do conhecimento! üï∞Ô∏è',
        mensagemInicio: 'Hora de viajar no tempo!',
        ritualInicio: 'üèõÔ∏è Abra sua mente para diferentes √©pocas e culturas!',
        motivacao: 'Cada per√≠odo hist√≥rico tem li√ß√µes para o presente! üìú',
        tecnicaConcentracao: 'T√©cnica "Contexto-Evento-Impacto": entenda o contexto, analise o evento, avalie o impacto.',
        preparacao: 'Organize cronologias, mapas e fatos importantes! üó∫Ô∏è',
        ferramentas: ['Atlas hist√≥rico', 'Linha do tempo', 'Document√°rios', 'Mapas', 'Biografias'],
        tecnicasEstudo: ['Cronologia visual', 'Mapas mentais', 'Storytelling hist√≥rico'],
        intervalos: 'A cada 60 min: pausa reflexiva - pense sobre como a hist√≥ria influencia hoje',
        metaSessao: 'Compreender processos hist√≥ricos e suas conex√µes',
        objetivo: 'Desenvolver consci√™ncia hist√≥rica e pensamento cr√≠tico',
        dicas: ['Crie narrativas', 'Use mapas e imagens', 'Compare √©pocas diferentes'],
        dicaPausa: 'Reflita sobre como os eventos estudados ainda influenciam nossa sociedade!',
        ambienteIdeal: 'Ambiente silencioso para reflex√£o, com mapas e cronologias vis√≠veis',
        estadoMentalIdeal: 'Reflexivo, curioso sobre diferentes culturas',
        checklist: ['Cronologias', 'Mapas hist√≥ricos', 'Datas importantes', 'Contextos sociais']
      };
    }

    if (texto.includes('portugu√™s') || texto.includes('literatura') || texto.includes('reda√ß√£o') ||
      texto.includes('gram√°tica') || texto.includes('texto') || texto.includes('interpreta√ß√£o') ||
      texto.includes('linguagem') || texto.includes('escrita') || texto.includes('leitura')) {
      return {
        emoji: 'üìù',
        materia: 'Portugu√™s',
        titulo: 'Sess√£o de Portugu√™s',
        tipo: 'lingu√≠stica',
        dificuldade: 'm√©dia',
        mensagemCriacao: 'Sua sess√£o de portugu√™s',
        descricaoDetalhada: 'O portugu√™s √© nossa ferramenta de express√£o! Cada palavra bem escolhida √© um poder.',
        dicaPreparacao: '‚úçÔ∏è Prepare textos diversos e exercite sua express√£o!',
        lembretePreparacao: 'As palavras est√£o esperando por voc√™!',
        checklistPreparacao: '‚úÖ Dicion√°rio\n‚úÖ Gram√°tica\n‚úÖ Textos para an√°lise\n‚úÖ Papel para reda√ß√£o',
        dicaUltimahora: 'Leia um par√°grafo em voz alta para aquecer a interpreta√ß√£o!',
        ultimoAviso: '√â hora de dominar nossa l√≠ngua!',
        fraseMotivacional: '"As palavras t√™m o poder de destruir e criar. Quando as palavras s√£o verdadeiras e gentis, podem mudar o mundo"',
        objetivosEspecificos: '‚Ä¢ Melhorar interpreta√ß√£o textual\n‚Ä¢ Aprimorar gram√°tica\n‚Ä¢ Desenvolver escrita clara',
        boostFinal: 'Sua eloqu√™ncia √© sua for√ßa! ‚úçÔ∏è',
        mensagemInicio: 'Vamos dominar nossa l√≠ngua!',
        ritualInicio: 'üìù Respire, organize seus pensamentos e expresse-se!',
        motivacao: 'Palavras s√£o poder! Use-as com maestria! ‚úçÔ∏è',
        tecnicaConcentracao: 'T√©cnica "Ler-Compreender-Expressar": leia atentamente, compreenda profundamente, expresse claramente.',
        preparacao: 'Dicion√°rio, gram√°tica e criatividade em m√£os! üìñ',
        ferramentas: ['Dicion√°rio completo', 'Gram√°tica atualizada', 'Textos diversos', 'Caderno de reda√ß√£o'],
        tecnicasEstudo: ['Leitura ativa', 'Resumos criativos', 'Mapas sem√¢nticos'],
        intervalos: 'A cada 50 min: pausa para ler algo prazeroso - um poema, uma cr√¥nica',
        metaSessao: 'Aprimorar dom√≠nio da l√≠ngua portuguesa em todas suas formas',
        objetivo: 'Desenvolver compet√™ncia comunicativa completa',
        dicas: ['Leia sempre em voz alta', 'Anote palavras novas', 'Pratique diferentes g√™neros textuais'],
        dicaPausa: 'Converse com algu√©m ou escreva seus pensamentos - pratique a express√£o!',
        ambienteIdeal: 'Local silencioso para leitura, com dicion√°rio sempre √† m√£o',
        estadoMentalIdeal: 'Atento √† beleza da linguagem, criativo',
        checklist: ['Textos selecionados', 'Dicion√°rio', 'Gram√°tica', 'Material de escrita']
      };
    }

    if (texto.includes('biologia') || texto.includes('c√©lula') || texto.includes('gen√©tica') ||
      texto.includes('evolu√ß√£o') || texto.includes('ecologia') || texto.includes('anatomia') ||
      texto.includes('fisiologia') || texto.includes('bot√¢nica') || texto.includes('zoologia')) {
      return {
        emoji: 'üß¨',
        materia: 'Biologia',
        titulo: 'Sess√£o de Biologia',
        tipo: 'natural',
        dificuldade: 'm√©dia',
        mensagemCriacao: 'Sua sess√£o de biologia',
        descricaoDetalhada: 'A biologia √© o estudo da vida! Cada c√©lula, cada organismo tem uma hist√≥ria fascinante.',
        dicaPreparacao: 'üî¨ Visualize processos celulares e conex√µes ecol√≥gicas!',
        lembretePreparacao: 'Prepare-se para explorar os mist√©rios da vida!',
        checklistPreparacao: '‚úÖ Atlas de anatomia\n‚úÖ Esquemas celulares\n‚úÖ Ciclos biol√≥gicos\n‚úÖ Classifica√ß√µes',
        dicaUltimahora: 'Conecte estrutura e fun√ß√£o - na biologia, forma e fun√ß√£o andam juntas!',
        ultimoAviso: 'A vida em suas m√∫ltiplas formas te espera!',
        fraseMotivacional: '"Nada em biologia faz sentido exceto √† luz da evolu√ß√£o" - Theodosius Dobzhansky',
        objetivosEspecificos: '‚Ä¢ Compreender processos vitais\n‚Ä¢ Conectar estrutura e fun√ß√£o\n‚Ä¢ Analisar rela√ß√µes ecol√≥gicas',
        boostFinal: 'Voc√™ est√° conectado(a) com toda a vida do planeta! üå±',
        mensagemInicio: 'Vamos explorar os mist√©rios da vida!',
        ritualInicio: 'üß¨ Conecte-se com a vida ao seu redor e mergulhe nos processos vitais!',
        motivacao: 'Voc√™ √© parte dessa teia incr√≠vel da vida! üåø',
        tecnicaConcentracao: 'T√©cnica "Macro-Micro-Fun√ß√£o": veja o organismo completo, analise partes, compreenda fun√ß√µes.',
        preparacao: 'Atlas, esquemas e curiosidade sobre a vida! üî¨',
        ferramentas: ['Atlas biol√≥gico', 'Modelos celulares', 'Esquemas de sistemas', 'Classifica√ß√µes'],
        tecnicasEstudo: ['Diagramas de processos', 'Compara√ß√µes evolutivas', 'Ciclos biol√≥gicos'],
        intervalos: 'A cada 45 min: pausa ao ar livre para observar a biologia em a√ß√£o',
        metaSessao: 'Compreender a complexidade e beleza dos sistemas vivos',
        objetivo: 'Desenvolver vis√£o integrada da vida',
        dicas: ['Sempre conecte com exemplos reais', 'Use analogias corporais', 'Observe a natureza'],
        dicaPausa: 'Observe plantas, animais ou at√© suas pr√≥prias c√©lulas trabalhando!',
        ambienteIdeal: 'Ambiente natural quando poss√≠vel, com boa ilumina√ß√£o para observa√ß√£o',
        estadoMentalIdeal: 'Curioso sobre a vida, observador da natureza',
        checklist: ['Atlas biol√≥gico', 'Esquemas de sistemas', 'Ciclos e processos', 'Classifica√ß√µes']
      };
    }

    if (texto.includes('geografia') || texto.includes('territ√≥rio') || texto.includes('relevo') ||
      texto.includes('clima') || texto.includes('popula√ß√£o') || texto.includes('economia') ||
      texto.includes('urbaniza√ß√£o') || texto.includes('globaliza√ß√£o') || texto.includes('cartografia')) {
      return {
        emoji: 'üåç',
        materia: 'Geografia',
        titulo: 'Sess√£o de Geografia',
        tipo: 'espacial',
        dificuldade: 'm√©dia',
        mensagemCriacao: 'Sua sess√£o de geografia',
        descricaoDetalhada: 'A geografia conecta o mundo! Cada lugar tem sua identidade e suas conex√µes globais.',
        dicaPreparacao: 'üó∫Ô∏è Tenha mapas e atlas sempre por perto para visualizar!',
        lembretePreparacao: 'Prepare sua vis√£o espacial do mundo!',
        checklistPreparacao: '‚úÖ Atlas mundial\n‚úÖ Mapas tem√°ticos\n‚úÖ Dados estat√≠sticos\n‚úÖ Imagens de sat√©lite',
        dicaUltimahora: 'Pense sempre na escala: local, regional, nacional, global!',
        ultimoAviso: 'O mundo inteiro est√° esperando por voc√™!',
        fraseMotivacional: '"A geografia √© a ci√™ncia que estuda a diferencia√ß√£o espacial da superf√≠cie terrestre"',
        objetivosEspecificos: '‚Ä¢ Compreender rela√ß√µes espaciais\n‚Ä¢ Analisar paisagens\n‚Ä¢ Conectar local e global',
        boostFinal: 'Voc√™ tem o mundo inteiro na sua mente! üåé',
        mensagemInicio: 'Vamos explorar nosso planeta!',
        ritualInicio: 'üåç Visualize os espa√ßos, conecte os lugares e analise as rela√ß√µes!',
        motivacao: 'Cada lugar tem sua hist√≥ria e suas conex√µes! üó∫Ô∏è',
        tecnicaConcentracao: 'T√©cnica "Localizar-Analisar-Conectar": localize no espa√ßo, analise caracter√≠sticas, conecte com outros lugares.',
        preparacao: 'Mapas, atlas e vis√£o espacial agu√ßada! üß≠',
        ferramentas: ['Atlas completo', 'Mapas tem√°ticos', 'Google Earth', 'Dados estat√≠sticos', 'Fotos a√©reas'],
        tecnicasEstudo: ['An√°lise de mapas', 'Compara√ß√µes regionais', 'Estudos de caso'],
        intervalos: 'A cada 50 min: olhe pela janela e observe a geografia ao seu redor',
        metaSessao: 'Desenvolver consci√™ncia espacial e vis√£o geogr√°fica integrada',
        objetivo: 'Compreender as rela√ß√µes entre sociedade e natureza no espa√ßo',
        dicas: ['Use sempre mapas', 'Compare escalas diferentes', 'Conecte com atualidades'],
        dicaPausa: 'Observe a paisagem ao redor - relevo, uso do solo, circula√ß√£o!',
        ambienteIdeal: 'Mesa ampla para mapas, boa vis√£o do exterior',
        estadoMentalIdeal: 'Observador espacial, conectivo, anal√≠tico',
        checklist: ['Atlas atualizado', 'Mapas diversos', 'Dados atuais', 'R√©gua para escalas']
      };
    }

    // Contexto padr√£o mais rico para outras mat√©rias
    return {
      emoji: 'üìö',
      materia: 'Estudo Geral',
      titulo: 'Sess√£o de Estudo',
      tipo: 'geral',
      dificuldade: 'vari√°vel',
      mensagemCriacao: 'Sua sess√£o de estudo',
      descricaoDetalhada: 'O conhecimento √© uma jornada! Cada sess√£o de estudo √© um passo para seus objetivos.',
      dicaPreparacao: 'üìñ Organize seus materiais e prepare sua mente para aprender!',
      lembretePreparacao: 'Chegou a hora de expandir horizontes!',
      checklistPreparacao: '‚úÖ Material de estudo\n‚úÖ Anota√ß√µes organizadas\n‚úÖ Ambiente preparado\n‚úÖ Objetivos claros',
      dicaUltimahora: 'Defina objetivos claros para esta sess√£o!',
      ultimoAviso: 'Sua mente est√° pronta para absorver conhecimento!',
      fraseMotivacional: '"Conhecimento √© poder, e poder √© liberdade"',
      objetivosEspecificos: '‚Ä¢ Compreender conceitos-chave\n‚Ä¢ Fazer conex√µes importantes\n‚Ä¢ Aplicar conhecimentos',
      boostFinal: 'Voc√™ est√° construindo seu futuro com conhecimento! üéì',
      mensagemInicio: 'Vamos estudar com prop√≥sito e foco!',
      ritualInicio: 'üìö Respire fundo, foque nos objetivos e mergulhe no conhecimento!',
      motivacao: 'Conhecimento √© o √∫nico tesouro que ningu√©m pode roubar! üíé',
      tecnicaConcentracao: 'T√©cnica "Objetivo-M√©todo-Revis√£o": defina o objetivo, escolha o m√©todo, revise o aprendido.',
      preparacao: 'Organize seus materiais e prepare a mente! üß†',
      ferramentas: ['Material de estudo', 'Caderno de anota√ß√µes', 'Marcadores', 'Timer'],
      tecnicasEstudo: ['Leitura ativa', 'Resumos', 'Mapas mentais', 'Question√°rios'],
      intervalos: 'A cada 45 min: pausa ativa para consolidar o aprendizado',
      metaSessao: 'Alcan√ßar compreens√£o profunda e duradoura do conte√∫do',
      objetivo: 'Desenvolver conhecimento s√≥lido e habilidades de estudo',
      dicas: ['Fa√ßa anota√ß√µes pr√≥prias', 'Teste seu entendimento', 'Conecte com experi√™ncias'],
      dicaPausa: 'Reflita sobre o que aprendeu e como pode aplicar!',
      ambienteIdeal: 'Local organizado, silencioso, bem iluminado',
      estadoMentalIdeal: 'Focado, motivado, receptivo ao aprendizado',
      checklist: ['Material organizado', 'Objetivos definidos', 'Ambiente preparado', 'Tempo planejado']
    };
  }

  /**
   * Calcula dura√ß√£o da sess√£o em formato amig√°vel
   */
  _calcularDuracaoSessao(sessaoData) {
    if (!sessaoData.tempoInicio || !sessaoData.tempoFim) {
      return 'Dura√ß√£o n√£o definida';
    }

    const inicio = new Date(sessaoData.tempoInicio);
    const fim = new Date(sessaoData.tempoFim);
    const duracaoMs = fim - inicio;
    const horas = Math.floor(duracaoMs / (1000 * 60 * 60));
    const minutos = Math.floor((duracaoMs % (1000 * 60 * 60)) / (1000 * 60));

    if (horas > 0) {
      return `${horas}h${minutos > 0 ? ` ${minutos}min` : ''}`;
    }
    return `${minutos}min`;
  }

  /**
   * Manipula erros de conex√£o
   */
  handleConnectionError(error) {
    logger.error('‚ùå Erro de conex√£o RabbitMQ', { error: error.message });
    this.isConnected = false;
  }

  /**
   * Manipula fechamento de conex√£o
   */
  async handleConnectionClose() {
    logger.warn('‚ö†Ô∏è Conex√£o RabbitMQ fechada');
    this.isConnected = false;
    await this.handleReconnect();
  }

  /**
   * Manipula erros de canal
   */
  handleChannelError(error) {
    logger.error('‚ùå Erro de canal RabbitMQ', { error: error.message });
  }

  /**
   * Gerencia reconex√£o autom√°tica
   */
  async handleReconnect() {
    if (this.reconnectAttempts >= this.maxReconnectAttempts) {
      logger.error('üíÄ M√°ximo de tentativas de reconex√£o atingido');
      return;
    }

    this.reconnectAttempts++;

    logger.info(`üîÑ Tentativa de reconex√£o ${this.reconnectAttempts}/${this.maxReconnectAttempts}...`);

    setTimeout(async () => {
      await this.connect();
    }, this.reconnectDelay);
  }

  /**
   * Fecha conex√£o graciosamente
   */
  async close() {
    try {
      if (this.channel) {
        await this.channel.close();
      }
      if (this.connection) {
        await this.connection.close();
      }
      this.isConnected = false;
      logger.info('üîí Conex√£o RabbitMQ fechada');
    } catch (error) {
      logger.error('‚ùå Erro ao fechar conex√£o RabbitMQ', { error: error.message });
    }
  }

  /**
   * Verifica se est√° conectado
   */
  isHealthy() {
    return this.isConnected && this.connection && !this.connection.connection.stream.destroyed;
  }
}

// Singleton instance
const rabbitMQService = new RabbitMQService();
export default rabbitMQService;