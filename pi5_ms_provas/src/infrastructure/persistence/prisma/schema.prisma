// Organiza tudo aqui dentro pra n ter erro

generator client {
    provider = "prisma-client-js"
    output   = "../../../../node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum StatusProva {
    PENDENTE
    CONCLUIDA
    CANCELADA
}

enum TipoProva {
    VESTIBULAR
    PROVA
    CONCURSO_PUBLICO
    CERTIFICACAO
}

enum TipoEvento {
    VESTIBULAR
    CONCURSO_PUBLICO
    ENEM
    CERTIFICACAO
    PROVA_SIMULADA
}

enum StatusInscricao {
    INSCRITO
    CONFIRMADO
    CANCELADO
    REALIZADO
}

model Materia {
    id            String         @id @default(uuid())
    nome          String
    descricao     String?
    userId        String // üîí CAMPO OBRIGAT√ìRIO PARA ISOLAMENTO
    provas        Prova[] // Relacionamento antigo (manter por compatibilidade)
    provaMaterias ProvaMateria[] // Novo relacionamento many-to-many
    eventos       Evento[]
    sessoesEstudo SessaoEstudo[]
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt

    // √çndice para performance em consultas por usu√°rio
    @@index([userId])
    @@map("materias")
}

model Prova {
    id            String         @id @default(uuid())
    titulo        String
    descricao     String?
    data          DateTime
    horario       DateTime
    local         String
    status        StatusProva    @default(PENDENTE)
    userId        String // üîí CAMPO OBRIGAT√ìRIO PARA ISOLAMENTO
    materiaId     String? // Mantido por compatibilidade (deprecated)
    materia       Materia?       @relation(fields: [materiaId], references: [id])
    provaMaterias ProvaMateria[] // Novo relacionamento many-to-many
    filtros       Json?
    sessoesEstudo SessaoEstudo[]
    sessoes       Sessao[]
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt

    // √çndice para performance em consultas por usu√°rio
    @@index([userId])
    @@map("provas")
}

model ProvaMateria {
    id        String   @id @default(uuid())
    provaId   String
    materiaId String
    prova     Prova    @relation(fields: [provaId], references: [id], onDelete: Cascade)
    materia   Materia  @relation(fields: [materiaId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())

    @@unique([provaId, materiaId])
    @@map("prova_materias")
}

model Evento {
    id                  String            @id @default(uuid())
    titulo              String // "ENEM 2025", "Vestibular USP 2025"
    descricao           String?
    tipo                TipoEvento
    data                DateTime
    horario             DateTime
    local               String
    userId              String? // üîí Opcional para eventos p√∫blicos
    materiaId           String? // Opcional, alguns eventos s√£o multi-mat√©ria
    materia             Materia?          @relation(fields: [materiaId], references: [id])
    urlInscricao        String? // Link para inscri√ß√£o oficial
    taxaInscricao       Decimal? // Valor da inscri√ß√£o
    dataLimiteInscricao DateTime? // Data limite para inscri√ß√£o
    inscricoes          EventoInscricao[]
    sessoesEstudo       SessaoEstudo[] // Estudos direcionados para este evento
    createdAt           DateTime          @default(now())
    updatedAt           DateTime          @updatedAt

    // √çndice para performance em consultas por usu√°rio
    @@index([userId])
    @@map("eventos")
}

model EventoInscricao {
    id          String          @id @default(uuid())
    eventoId    String
    evento      Evento          @relation(fields: [eventoId], references: [id])
    usuarioId   String // üîí ID do estudante (FK para user-service)
    status      StatusInscricao @default(INSCRITO)
    observacoes String?
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt

    @@unique([eventoId, usuarioId])
    // √çndice para performance
    @@index([usuarioId])
    @@map("evento_inscricoes")
}

model SessaoEstudo {
    id                String    @id @default(uuid())
    userId            String // üîí CAMPO OBRIGAT√ìRIO PARA ISOLAMENTO
    materiaId         String
    materia           Materia   @relation(fields: [materiaId], references: [id])
    provaId           String?
    prova             Prova?    @relation(fields: [provaId], references: [id])
    eventoId          String? // Nova rela√ß√£o com eventos
    evento            Evento?   @relation(fields: [eventoId], references: [id])
    conteudo          String
    topicos           String[]
    tempoInicio       DateTime?
    tempoFim          DateTime?
    // Campos para gamifica√ß√£o
    questoesAcertadas Int?      @default(0)
    totalQuestoes     Int?      @default(0)
    finalizada        Boolean   @default(false) // Campos para sistema de XP diferenciado
    isAgendada        Boolean   @default(false) // Se a sess√£o foi agendada
    cumpriuPrazo      Boolean? // Se cumpriu o prazo quando agendada
    horarioAgendado   DateTime? // Hor√°rio originalmente agendado
    metaTempo         Int? // Meta de tempo em minutos para sess√µes agendadas
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt

    // √çndice para performance em consultas por usu√°rio
    @@index([userId])
    @@map("sessoes_estudo")
}

model Sessao {
    id        String   @id @default(uuid())
    data      DateTime
    duracao   Int
    userId    String // üîí CAMPO OBRIGAT√ìRIO PARA ISOLAMENTO
    provaId   String
    prova     Prova    @relation(fields: [provaId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // √çndice para performance
    @@index([userId])
}
