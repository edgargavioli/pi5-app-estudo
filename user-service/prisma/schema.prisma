// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  password        String
  fcmToken        String    @unique
  name            String
  points          Int       @default(0)
  isEmailVerified Boolean   @default(false)
  lastLogin       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  imageBase64     String? // Base64-encoded profile image

  // Study-related fields
  studyPreferences   StudyPreferences?
  studySessions      StudySession[]
  studyMaterials     StudyMaterial[]
  // Relations
  achievements       Achievement[]
  pointsTransactions PointsTransaction[]
  studyStreak        StudyStreak?
  streakAchievements StreakAchievement[]

  @@map("users")
}

model StudyPreferences {
  id                String   @id @default(uuid())
  userId            String   @unique
  preferredSubjects String[] // Array of subject IDs or names
  studyDuration     Int // Preferred study session duration in minutes
  breakDuration     Int // Preferred break duration in minutes
  studySchedule     Json // JSON object for weekly schedule
  notifications     Boolean  @default(true)
  theme             String   @default("light")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("study_preferences")
}

model StudySession {
  id        String    @id @default(uuid())
  userId    String
  startTime DateTime
  endTime   DateTime?
  duration  Int // Duration in minutes
  subject   String
  notes     String?
  status    String // ACTIVE, COMPLETED, CANCELLED
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("study_sessions")
}

model StudyMaterial {
  id        String   @id @default(uuid())
  userId    String
  title     String
  type      String // PDF, VIDEO, LINK, NOTE
  url       String?
  content   String?
  subject   String
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("study_materials")
}

model Achievement {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String
  points      Int
  createdAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("achievements")
}

model PointsTransaction {
  id        String   @id @default(uuid())
  userId    String
  points    Int
  reason    String
  type      String // ADD, REMOVE
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("points_transactions")
}

model StudyStreak {
  id               String    @id @default(uuid())
  userId           String
  currentStreak    Int       @default(0) // Dias consecutivos atual
  longestStreak    Int       @default(0) // Maior sequência já alcançada
  lastStudyDate    DateTime? // Última data que cumpriu a meta
  isActivatedToday Boolean   @default(false) // Se já ativou a sequência hoje
  targetMinutes    Int       @default(1) // Meta em minutos (para testes: ~10 segundos)
  studiedToday     Int       @default(0) // Minutos estudados hoje
  timezone         String    @default("America/Sao_Paulo") // Fuso horário do usuário
  lastResetDate    DateTime  @default(now()) // Última vez que resetou (meia-noite)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("study_streaks")
}

model StreakAchievement {
  id          String   @id @default(uuid())
  userId      String
  streakDays  Int // Quantidade de dias da conquista (3, 7, 15, 30, etc.)
  title       String // Título da conquista
  description String // Descrição da conquista
  unlockedAt  DateTime @default(now())
  createdAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, streakDays])
  @@map("streak_achievements")
}
